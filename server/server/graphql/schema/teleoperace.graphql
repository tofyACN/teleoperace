scalar Date
type Query {
    users: [User!]!
    user(userId: ID!): User!
    login(email: String!, password: String!): AuthData!
    rovers: [Rover!]!
    rover(roverInput: RoverInput!): Rover!
    races: [Race!]
    raceById(raceId: ID!): Race!
    raceByTitle(title: String!): Race!
    # participants: [Participant!]!
  }
type Mutation {
  createUser(userInput: UserInput): AuthData!
  updateUser(userId: ID!, updateUser: UpdateUser): User!

  createRover(roverInput: RoverInput): Rover!
  updateRover(roverId: ID!, updateRover: RoverInput): Rover!
  deleteRover(roverInput: RoverInput!): Rover!

  createRace(raceInput: RaceInput): Race!
  updateRace(userId: ID!, updateRace: RaceInput): Race!
  deleteRace(raceInput: RaceInput!): Race!
  addParticipant(raceId: ID!, participantInput: ParticipantInput): Race!
}
type Subscription {
  userAdded: User
  roverAdded: Rover
  raceAdded: Race
  participantAdded: Participant
}
type User {
  _id: ID!
  email: String!
  name: String!
  password: String!
  createdAt: Date!
  updatedAt: Date!
}
type AuthData {
  userId: ID!
  token: String!
  tokenExpiration: Int!
}
type Rover {
  _id: ID!
  name: String!
  url: String!
  createdAt: Date!
  updatedAt: Date!
}
type Participant {
  user: User
  rover: Rover
  score: Int
}
type Race {
  _id: ID!
  title: String!
  plannedStartDate: Date
  startDate: Date
  plannedEndDate: Date
  endDate: Date
  participants: [Participant!]!
}
input UserInput {
  email: String
  name: String
  password: String
}
input UpdateUser {
  email: String
  name: String
  password: String
}
input RoverInput {
  name: String
  url: String
}
input UpdateRover {
  id: ID!
  name: String
  url: String
}
input RaceInput {
  title: String!
  plannedStartDate: Date
  startDate: Date
  plannedEndDate: Date
  endDate: Date
  participants: [ParticipantInput!]
}
input UpdateRace {
  id: ID!
  title: String!
  plannedStartDate: Date
  startDate: Date
  plannedEndDate: Date
  endDate: Date
  participants: [ParticipantInput!]
}
input ParticipantInput {
  userId: ID!
  roverId: ID!
  score: Int
}